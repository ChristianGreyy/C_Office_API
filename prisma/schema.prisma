// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserStatus {
  active
  inactive
}

enum EUserRole {
  admin
  staff
  user
  manager
}

enum EUserGender {
  female
  male
}

enum EUserProjectRole {
  manager
  qc
  developer
  tester
  leader
  sale
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique @db.VarChar(50)
  phone        String?       @unique @db.VarChar(50)
  password     String        @db.VarChar(100)
  gender       EUserGender?
  firstName    String?       @map("first_name") @db.VarChar(50)
  lastName     String?       @map("last_name") @db.VarChar(50)
  status       EUserStatus?
  checkInDate  DateTime?     @default(now()) @map("check_in_date")
  checkOutDate DateTime?     @map("check_out_date")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  role         Role?         @relation(fields: [roleId], references: [id])
  roleId       Int?
  Position     Position?     @relation(fields: [positionId], references: [id])
  positionId   Int?
  Level        Level?        @relation(fields: [levelId], references: [id])
  levelId      Int?
  University   University?   @relation(fields: [universityId], references: [id])
  universityId Int?
  issues       Issue[]
  UserProject  UserProject[]
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(30)
  permissionIds Json     @default("[]")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  users         User[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  module    String?  @db.VarChar(30)
  name      String?  @db.VarChar(30)
  slug      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Position {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model Level {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model University {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model Tracker {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Priority {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Sprint {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(100)
  sprints     Sprint[]
  issues      Issue[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  UserProject UserProject[]
}

model UserProject {
  id        Int               @id @default(autoincrement())
  project   Project?          @relation(fields: [projectId], references: [id])
  projectId Int?
  user      User?             @relation(fields: [userId], references: [id])
  userId    Int?
  role      EUserProjectRole?
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
}

model Issue {
  id               Int       @id @default(autoincrement())
  subject          String?   @db.VarChar(30)
  input            String?   @db.Text
  completedPercent Int?      @map("completed_percent") @db.Integer
  startDate        DateTime? @map("start_date") @db.Date
  dueDate          DateTime? @map("due_date") @db.Date
  estimateTime     Int?      @map("estimate_time") @db.Integer
  output           String?   @db.Text
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  assign           User?     @relation(fields: [assignId], references: [id])
  assignId         Int?
  priority         Priority? @relation(fields: [priorityId], references: [id])
  priorityId       Int?
  tracker          Tracker?  @relation(fields: [trackerId], references: [id])
  trackerId        Int?
  status           Status?   @relation(fields: [statusId], references: [id])
  statusId         Int?
  category         Category? @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  project          Project?  @relation(fields: [projectId], references: [id])
  projectId        Int?
}
