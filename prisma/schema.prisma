// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserStatus {
  active
  inactive
}

enum EUserRole {
  admin
  staff
  user
  manager
}

enum EUserGender {
  female
  male
}

enum EUserProjectRole {
  manager
  qc
  developer
  tester
  leader
  sale
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique @db.VarChar(50)
  phone               String?              @unique @db.VarChar(50)
  password            String               @db.VarChar(100)
  gender              EUserGender?
  firstName           String?              @map("first_name") @db.VarChar(50)
  lastName            String?              @map("last_name") @db.VarChar(50)
  status              EUserStatus?
  checkInDate         DateTime?            @default(now()) @map("check_in_date")
  checkOutDate        DateTime?            @map("check_out_date")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  role                Role?                @relation(fields: [roleId], references: [id])
  roleId              Int?
  position            Position?            @relation(fields: [positionId], references: [id])
  positionId          Int?
  level               Level?               @relation(fields: [levelId], references: [id])
  levelId             Int?
  university          University?          @relation(fields: [universityId], references: [id])
  universityId        Int?
  issues              Issue[]
  userProjects        UserProject[]
  employeeAttendances EmployeeAttendance[]
  media               Media[]              @relation("creator_media")
  avatar              Media?               @relation("user_avatar", fields: [avatarId], references: [id])
  avatarId            Int?                 @unique
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(30)
  permissionIds Json     @default("[]")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  users         User[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  module    String?  @db.VarChar(30)
  name      String?  @db.VarChar(30)
  slug      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Position {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model Level {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model University {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  color     String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
}

model Tracker {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  slug      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Priority {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  slug      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(30)
  slug      String?  @db.VarChar(30)
  color      String?  @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issues    Issue[]
}

model Sprint {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(100)
  sprints     Sprint[]
  issues      Issue[]
  kickOffDate        DateTime? @map("kick_off_date") @db.Date
  deadline        DateTime? @map("deadline") @db.Date
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  UserProject UserProject[]
}

model UserProject {
  id        Int               @id @default(autoincrement())
  project   Project?          @relation(fields: [projectId], references: [id])
  projectId Int?
  user      User?             @relation(fields: [userId], references: [id])
  userId    Int?
  role      EUserProjectRole?
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
}

model Issue {
  id               Int       @id @default(autoincrement())
  subject          String?   @db.VarChar(30)
  input            String?   @db.Text
  completedPercent Int?      @map("completed_percent") @db.Integer @default(0)
  startDate        DateTime? @map("start_date") @db.Date
  dueDate          DateTime? @map("due_date") @db.Date
  estimateTime     Int?      @map("estimate_time") @db.Integer
  spentTime        Float?    @map("spent_time")
  output           String?   @db.Text
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  assigner         User?     @relation(fields: [assignId], references: [id])
  assignId         Int?
  priority         Priority? @relation(fields: [priorityId], references: [id])
  priorityId       Int?
  tracker          Tracker?  @relation(fields: [trackerId], references: [id])
  trackerId        Int?
  status           Status?   @relation(fields: [statusId], references: [id])
  statusId         Int?
  project          Project?  @relation(fields: [projectId], references: [id])
  projectId        Int?
}

model EmployeeAttendance {
  id           Int       @id @default(autoincrement())
  user         User?     @relation(fields: [userId], references: [id])
  userId       Int?
  checkInTime  DateTime?
  checkOutTime DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String?  @db.Text
  creator   User?    @relation("creator_media", fields: [creatorId], references: [id])
  creatorId Int?
  user      User?    @relation("user_avatar")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
